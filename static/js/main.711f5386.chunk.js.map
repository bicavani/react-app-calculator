{"version":3,"sources":["components/Button.js","components/ButtonPanel.js","components/Display.js","logic/operate.js","logic/calculate.js","logic/isNumber.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","orange","wide","join","trim","onClick","clickHandler","name","ButtonPanel","handleClick","buttonName","Display","value","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","alert","div","Error","calculate","obj","total","next","test","result","includes","parseFloat","App","state","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.711f5386.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Button(props) {\r\n\tconst handleClick = () => {\r\n    props.clickHandler(props.name);\r\n\t};\r\n\t\r\n\tconst className = [\r\n\t\t'component-button',\r\n\t\tprops.orange ? 'orange' : '',\r\n\t\tprops.wide ? 'wide' : ''\r\n\t]\r\n\treturn (\r\n\t\t\t<div className={className.join(' ').trim()}>\r\n\t\t\t\t\t<button onClick={handleClick}>\r\n\t\t\t\t\t\t\t{props.name}\r\n\t\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nButton.propTypes = {\r\n\tname: PropTypes.string.isRequired,\r\n\torange: PropTypes.bool,\r\n\twide: PropTypes.bool,\r\n\tclickHandler: PropTypes.func\r\n}\r\n\r\n","import React from 'react';\r\nimport Button from './Button';\r\nimport './ButtonPanel.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ButtonPanel(props) {\r\n  const handleClick = buttonName => {\r\n    props.clickHandler(buttonName);\r\n  };\r\n   \r\n  return (\r\n    <div className=\"component-button-panel\">\r\n        <div>\r\n          <Button name=\"AC\" clickHandler={handleClick} />\r\n          <Button name=\"+/-\" clickHandler={handleClick} />\r\n          <Button name=\"%\" clickHandler={handleClick} />\r\n          <Button name=\"รท\" clickHandler={handleClick} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"7\" clickHandler={handleClick} />\r\n          <Button name=\"8\" clickHandler={handleClick} />\r\n          <Button name=\"9\" clickHandler={handleClick} />\r\n          <Button name=\"x\" clickHandler={handleClick} orange  />\r\n        </div>\r\n        <div>\r\n          <Button name=\"4\" clickHandler={handleClick} />\r\n          <Button name=\"5\" clickHandler={handleClick} />\r\n          <Button name=\"6\" clickHandler={handleClick} />\r\n          <Button name=\"-\" clickHandler={handleClick} orange  />\r\n        </div>\r\n        <div>\r\n          <Button name=\"1\" clickHandler={handleClick} />\r\n          <Button name=\"2\" clickHandler={handleClick} />\r\n          <Button name=\"3\" clickHandler={handleClick} />\r\n          <Button name=\"+\" clickHandler={handleClick} orange  />\r\n        </div>\r\n        <div>\r\n          <Button name=\"0\" clickHandler={handleClick} wide />\r\n          <Button name=\".\" clickHandler={handleClick} />\r\n          <Button name=\"=\" clickHandler={handleClick} orange  />\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nButtonPanel.propTypes = {\r\n  clickHandler: PropTypes.func\r\n}","import React from 'react';\r\nimport './Display.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Display(props) {\r\n  return (\r\n    <div className=\"component-display\">\r\n      <div>\r\n        {props.value}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nDisplay.propTypes = {\r\n  value: PropTypes.string.isRequired\r\n}","import Big from \"big.js\";\r\n\r\nexport default function operate(numberOne, numberTwo, operation) {\r\n  const one = Big(numberOne || \"0\");\r\n  const two = Big(numberTwo || (operation === \"รท\" || operation === 'x' ? \"1\": \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\r\n  if (operation === \"+\") {\r\n    return one.plus(two).toString();\r\n  }\r\n  if (operation === \"-\") {\r\n    return one.minus(two).toString();\r\n  }\r\n  if (operation === \"x\") {\r\n    return one.times(two).toString();\r\n  }\r\n  if (operation === \"รท\") {\r\n    if (two === \"0\") {\r\n      alert(\"Divide by 0 error\");\r\n      return \"0\";\r\n    } else {\r\n      return one.div(two).toString();\r\n    }\r\n  }\r\n  throw Error(`Unknown operation '${operation}'`);\r\n}","import Big from \"big.js\";\r\n\r\nimport operate from \"./operate\";\r\nimport isNumber from \"./isNumber\";\r\n\r\n/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n *\r\n * Calculator data object contains:\r\n *   total:String      the running total\r\n *   next:String       the next number to be operated on with the total\r\n *   operation:String  +, -, etc.\r\n */\r\nexport default function calculate(obj, buttonName) {\r\n  if (buttonName === \"AC\") {\r\n    return {\r\n      total: null,\r\n      next: null,\r\n      operation: null,\r\n    };\r\n  }\r\n\r\n  if (isNumber(buttonName)) {\r\n    if (buttonName === \"0\" && obj.next === \"0\") {\r\n      return {};\r\n    }\r\n    // If there is an operation, update next\r\n    if (obj.operation) {\r\n      if (obj.next) {\r\n        return { next: obj.next + buttonName };\r\n      }\r\n      return { next: buttonName };\r\n    }\r\n    // If there is no operation, update next and clear the value\r\n    if (obj.next) {\r\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\r\n      return {\r\n        next,\r\n        total: null,\r\n      };\r\n    }\r\n    return {\r\n      next: buttonName,\r\n      total: null,\r\n    };\r\n  }\r\n\r\n  if (buttonName === \"%\") {\r\n    if (obj.operation && obj.next) {\r\n      const result = operate(obj.total, obj.next, obj.operation);\r\n      return {\r\n        total: Big(result)\r\n          .div(Big(\"100\"))\r\n          .toString(),\r\n        next: null,\r\n        operation: null,\r\n      };\r\n    }\r\n    if (obj.next) {\r\n      return {\r\n        next: Big(obj.next)\r\n          .div(Big(\"100\"))\r\n          .toString(),\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  if (buttonName === \".\") {\r\n    if (obj.next) {\r\n      // ignore a . if the next number already has one\r\n      if (obj.next.includes(\".\")) {\r\n        return {};\r\n      }\r\n      return { next: obj.next + \".\" };\r\n    }\r\n    return { next: \"0.\" };\r\n  }\r\n\r\n  if (buttonName === \"=\") {\r\n    if (obj.next && obj.operation) {\r\n      return {\r\n        total: operate(obj.total, obj.next, obj.operation),\r\n        next: null,\r\n        operation: null,\r\n      };\r\n    } else {\r\n      // '=' with no operation, nothing to do\r\n      return {};\r\n    }\r\n  }\r\n\r\n  if (buttonName === \"+/-\") {\r\n    if (obj.next) {\r\n      return { next: (-1 * parseFloat(obj.next)).toString() };\r\n    }\r\n    if (obj.total) {\r\n      return { total: (-1 * parseFloat(obj.total)).toString() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  // Button must be an operation\r\n\r\n  // When the user presses an operation button without having entered\r\n  // a number first, do nothing.\r\n  // if (!obj.next && !obj.total) {\r\n  //   return {};\r\n  // }\r\n\r\n  // User pressed an operation button and there is an existing operation\r\n  if (obj.operation) {\r\n    return {\r\n      total: operate(obj.total, obj.next, obj.operation),\r\n      next: null,\r\n      operation: buttonName,\r\n    };\r\n  }\r\n\r\n  // no operation yet, but the user typed one\r\n\r\n  // The user hasn't typed a number yet, just save the operation\r\n  if (!obj.next) {\r\n    return { operation: buttonName };\r\n  }\r\n\r\n  // save the operation and shift 'next' into 'total'\r\n  return {\r\n    total: obj.next,\r\n    next: null,\r\n    operation: buttonName,\r\n  };\r\n}\r\n\r\n\r\n","export default function isNumber(item) {\r\n  return /[0-9]+/.test(item);\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport ButtonPanel from './components/ButtonPanel';\nimport Display from './components/Display';\nimport calculate from './logic/calculate';\n\nclass App extends Component {\n  state = {\n    total: null,\n    next: null,\n    operation: null,\n  };\n\n  handleClick = buttonName => {\n    this.setState(calculate(this.state, buttonName));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Display value={this.state.next || this.state.total || '0'} />\n        <ButtonPanel clickHandler={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}